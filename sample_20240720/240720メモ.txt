


==========================================================================
==========================================================================
==========================================================================
// ★★ 
// ★★ 

全8回



=====================================
24/07/20 第6回目
=====================================

---【前半：座学】---

「行列」は避けて通れない。

bind とは……？？






---【後半：実習】---

---【005】---

「重要じゃないかもしれないですが、 gl.drawElementsで、なぜUNSIGNED_SHORTを指定しているのでしょうか？他の型がもう２つあると読みました。」
　┗　WebGL 1.0のデフォルトだとインデックスバッファの規定の長さが65535までしか使えないから。
拡張機能を使うともっと出来る。
↑
中級者以上になると、これで一度はハマる…。。

WebGLの世界は、ビットレベルでどうにかする…ということがよくあるので、ビットのことも考える必要があったりする。
JSほど緩くは無い。。




---【006】---

単位行列…

モデル座標変換行列…

ビュー座標変換行列

プロジェクション座標変換行列


なぜ行列を使うのか、目的を思い出す…
　┗　行列を使って描画する。
　┗　3Dを2Dの情報として変換して出力する。
　┗　3Dの情報を2Dにするのに（頂点を変換する = MVP行列）、行列を使うと便利。


行列を 掛け合わせる順序 に注意！
↑
中級者以上になると、これで一度はハマる…。。


「mvpMatrixの中身は、main.vert内で変更すること可能ですか？」
　┗　可能です。時と場合によって、必要だったらやる。


「杉本さんがWebGL始めた頃は、Three.jsって既にあったんですか？」
　┗　ありました。





---【007】---

基本的には、普通はバックフェイスカリングは有効化する。
映らないものを描画してもしょうがない。







---【008】---

three.js の OrbitControls みたいな感じのカメラ実装
左ボタンドラッグ操作で、注視点を中心に回転する
右ボタンドラッグ操作で、現在の視点を平行移動する
ホイール操作等で、ズームイン・アウト
camera.js に実装が書いてあります

あくまでも参考程度に





---【009】---

今日の山場…


「面の向き」と「光の向き」こそが明るさを決める要因になっている！


【法線】
法線は、向きだけを表すために用いられるベクトル です。← 重要！


そもそも
ライトで陰影を付けたい！
　┗　面の向きと光の向きを考える
　┗　面の向きを法線で表す
　┗　頂点に法線を属性として定義する。


シェーダにはプリントデバッグが無い…。
色にしてデバッグするしか無い…！


内積…
XYZをそれぞれ掛けて全部足す
↓
単位化しているベクトル同士の内積を取っている…
↓
-1.0 ~ 1.0 の範囲になる！


「向き」は必ず単位ベクトルにする！！







---【010】---

モデル座標変換行列
の逆転置行列 を使います。
モデル行列の、転置行列の、逆行列です。
↑
いったん、こういうものだと覚える…！





---【まとめ】---






課題：

次回の講座のファイルに答えが入っている。

頂点シェーダで陰影：
　頂点が計算した陰影を色として補完している。

フラグメントシェーダで陰影：
　ピクセルの一個一個で計算するので、よりキレイな陰影になる。

------------------
【講義後の質問】
------------------


